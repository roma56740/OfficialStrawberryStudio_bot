from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import locale
from db import get_booked_slots
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


WEEKDAYS = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
MONTHS = {
    1: "—è–Ω–≤", 2: "—Ñ–µ–≤", 3: "–º–∞—Ä", 4: "–∞–ø—Ä", 5: "–º–∞—è", 6: "–∏—é–Ω",
    7: "–∏—é–ª", 8: "–∞–≤–≥", 9: "—Å–µ–Ω", 10: "–æ–∫—Ç", 11: "–Ω–æ—è", 12: "–¥–µ–∫"
}

# –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
try:
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
except:
    pass  # Windows –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å, —Ç–æ–≥–¥–∞ –æ—Å—Ç–∞–≤–∏–º –∞–Ω–≥–ª

def get_tariff_inline_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üïí –ü–æ—á–∞—Å–æ–≤–æ–π", callback_data="tariff_hourly"),
            InlineKeyboardButton(text="üåô –ù–æ—á–Ω–æ–π", callback_data="tariff_night")
        ]
    ])

def get_date_selection_kb(tariff_type: str) -> InlineKeyboardMarkup:
    buttons = []
    for i in range(7):
        day = datetime.now() + timedelta(days=i)
        weekday = WEEKDAYS[day.weekday()]
        month = MONTHS[day.month]
        day_text = f"üìÖ {weekday}, {day.day:02d} {month}"
        callback_data = f"choose_date|{tariff_type}|{day.strftime('%Y-%m-%d')}"
        buttons.append([InlineKeyboardButton(text=day_text, callback_data=callback_data)])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


from datetime import datetime, timedelta

def generate_hour_buttons(date_str: str, tariff: str) -> InlineKeyboardMarkup:
    now = datetime.now()
    today = now.strftime("%Y-%m-%d") == date_str

    booked = get_booked_slots(date_str)
    booked_ranges = [(int(f), int(t)) for f, t in booked]

    if tariff == "hourly":
        start_hour, end_hour = 10, 22
    else:  # night
        start_hour, end_hour = 22, 30  # 30 = 6 next day

    buttons = []
    for h in range(start_hour, end_hour):
        display_h = h if h < 24 else h - 24
        time_str = f"{display_h:02d}:00"

        if today and h <= now.hour + 1:
            continue  # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—à–µ–¥—à–µ–µ

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
        is_busy = any(start <= h < end for start, end in booked_ranges)
        emoji = "‚ùå" if is_busy else "‚úÖ"
        cb_data = f"time_from|{h}"

        buttons.append([InlineKeyboardButton(text=f"{emoji} {time_str}", callback_data=cb_data)])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_booking_status_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üü¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ", callback_data="bookings_active"),
            InlineKeyboardButton(text="üî¥ –û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ", callback_data="bookings_cancelled"),
            InlineKeyboardButton(text="‚è≥ –ü—Ä–æ—à–µ–¥—à–∏–µ", callback_data="bookings_past"),
        ]
    ])


from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def get_shop_management_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="shop_create"),
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="shop_edit")
        ],
        [
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="shop_delete"),
            InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="shop_view")
        ]
    ])