# handlers/register.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from keyboards.register_kb import confirm_kb
from db import add_user_after_register, is_user_registered
from datetime import datetime
from keyboards.user_kb import get_user_keyboard
import re

from keyboards.admin_kb import admin_keyboard
router = Router()

class RegisterState(StatesGroup):
    full_name = State()
    birthday = State()
    phone = State()
    confirm = State()

@router.message(F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def start_register(message: Message, state: FSMContext):
    if is_user_registered(message.from_user.id):
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    await state.set_state(RegisterState.full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>–§–∞–º–∏–ª–∏—é –∏ –ò–º—è</b>:", parse_mode="HTML")


@router.message(RegisterState.full_name)
async def get_full_name(message: Message, state: FSMContext):
    text = message.text.strip()
    parts = text.split()

    if len(parts) < 2 or not all(p.isalpha() for p in parts):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ <b>–§–∞–º–∏–ª–∏—é –∏ –ò–º—è</b>, —Ä–∞–∑–¥–µ–ª—è—è –ø—Ä–æ–±–µ–ª–æ–º.")
        return

    formatted_name = ' '.join(part.capitalize() for part in parts)
    await state.update_data(full_name=formatted_name)
    await state.set_state(RegisterState.birthday)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", parse_mode="HTML")


import sqlite3

def is_phone_exists(phone: str) -> bool:
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("SELECT 1 FROM users WHERE phone = ?", (phone,))
    exists = c.fetchone() is not None
    conn.close()
    return exists

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

@router.message(RegisterState.birthday)
async def get_birthday(message: Message, state: FSMContext):
    try:
        b_date = datetime.strptime(message.text.strip(), "%d.%m.%Y")
        today = datetime.today()
        age = today.year - b_date.year - ((today.month, today.day) < (b_date.month, b_date.day))

        if age < 14:    
            await state.update_data(birth_date=b_date.strftime("%Y-%m-%d"), age=age)
            check_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —É –∞–¥–º–∏–Ω–∞", callback_data="underage_check")]
            ])
            await message.answer("‚ùå –í–∞–º –µ—â—ë –Ω–µ—Ç 14 –ª–µ—Ç.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=check_kb)
            return
        if age > 100:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 100 –ª–µ—Ç).")
            return

        await state.update_data(birth_date=b_date.strftime("%Y-%m-%d"), age=age)
        await state.set_state(RegisterState.phone)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:", parse_mode="HTML")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")


@router.message(RegisterState.phone)
async def get_phone(message: Message, state: FSMContext):
    phone = message.text.strip()

    if not re.fullmatch(r"\+7\d{10}", phone):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>+7XXXXXXXXXX</b>")
        return

    if is_phone_exists(phone):
        await message.answer("‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
        return

    await state.update_data(phone=phone, user_id=message.from_user.id)  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ user_id
    data = await state.get_data()

    confirm_text = (
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"üë§ –§–ò–û: {data['full_name']}\n"
        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birth_date']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
    )
    await message.answer(confirm_text, reply_markup=confirm_kb, parse_mode="HTML")
    await state.set_state(RegisterState.confirm)


def update_user(telegram_id, full_name, birth_date, phone, age, underage):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    c.execute("SELECT 1 FROM users WHERE telegram_id = ?", (telegram_id,))
    if not c.fetchone():
        print(f"[!] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é...")
        c.execute("""
            INSERT INTO users (telegram_id, full_name, birth_date, phone, age, underage)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (telegram_id, full_name, birth_date, phone, age, underage))
    else:
        print(f"[‚úì] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        c.execute("""
            UPDATE users SET
                full_name = ?,
                birth_date = ?,
                phone = ?,
                age = ?,
                underage = ?
            WHERE telegram_id = ?
        """, (full_name, birth_date, phone, age, underage, telegram_id))

    conn.commit()
    print("ROWCOUNT:", c.rowcount)
    conn.close()

@router.callback_query(F.data == "confirm_register")
async def confirm_register(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    telegram_id = callback.from_user.id

    underage = int(data['age'] < 14)
    print(telegram_id, data['full_name'], data['birth_date'], data['phone'], data['age'], underage)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î



    update_user(
        telegram_id=telegram_id,
        full_name=data['full_name'],
        birth_date=data['birth_date'],
        phone=data['phone'],
        age=data['age'],
        underage=underage
    )

    await callback.message.delete()

    
    if telegram_id == ADMIN_ID:
        await callback.message.answer(
            "‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
            reply_markup=admin_keyboard
        )
    else:
        await callback.message.answer(
            "‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
            reply_markup=get_user_keyboard(registered=True)
        )
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "cancel_register")
async def cancel_register(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    await callback.answer()


from dotenv import load_dotenv
import os
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

@router.callback_query(F.data == "underage_check")
async def request_admin_check(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id

    approve_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_underage:{user_id}")]
    ])

    await callback.message.edit_text("‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    await callback.answer()

    await callback.bot.send_message(
        ADMIN_ID,
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username or '–±–µ–∑ username'} ({user_id}) –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –µ–º—É –µ—Å—Ç—å 14 –ª–µ—Ç.\n"
        f"–§–ò–û: {data.get('full_name')}\n"
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data.get('birth_date')}",
        reply_markup=approve_kb
    )


@router.callback_query(F.data.startswith("approve_underage:"))
async def approve_underage(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(":")[1])

    await callback.bot.send_message(
        user_id,
        "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
    )
    await callback.message.edit_text("‚úÖ –í–æ–∑—Ä–∞—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
    await callback.answer()



from keyboards.admin_kb import admin_keyboard

@router.message(F.text == "/restart")
async def restart_command(message: Message, state: FSMContext):
    await state.clear()
    
    if message.from_user.id == ADMIN_ID:
        await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=admin_keyboard)
    elif is_user_registered(message.from_user.id):
        await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...\n\n–í–æ—Ç –≤–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_user_keyboard(registered=True))
    else:
        await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.")