from aiogram import Router
from aiogram.types import Message, CallbackQuery
from keyboards.booking_kb import get_tariff_inline_kb, get_date_selection_kb
from aiogram.fsm.context import FSMContext
from db import get_booked_slots, add_booking
from aiogram.fsm.state import StatesGroup, State
from keyboards.booking_kb import generate_hour_buttons 
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from db import get_booked_slots
import sqlite3

from dotenv import load_dotenv
import os
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

class BookingState(StatesGroup):
    tariff = State()
    date = State()
    time_from = State()
    time_to = State()


router = Router()

@router.message(lambda m: m.text == "üé∂ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def choose_tariff(message: Message):
    text = (
        "üéß <b>–ó–∞–ø–∏—Å—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—É—é —Å—Ç—É–¥–∏—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ <i>—Ç–∞—Ä–∏—Ñ</i>, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç:\n"
        "‚Ä¢ <b>üïí –ü–æ—á–∞—Å–æ–≤–æ–π</b> ‚Äî —Å 10:00 –¥–æ 22:00\n"
        "‚Ä¢ <b>üåô –ù–æ—á–Ω–æ–π</b> ‚Äî —Å 22:00 –¥–æ 06:00\n\n" 
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. ‚è±Ô∏è"
    )
    await message.answer(
        text,
        reply_markup=get_tariff_inline_kb(),
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data in ["tariff_hourly", "tariff_night"])
async def handle_tariff_choice(callback: CallbackQuery):
    tariff = "hourly" if callback.data == "tariff_hourly" else "night"
    await callback.message.answer(
        f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å</b> –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ {'–ø–æ—á–∞—Å–æ–≤–æ–π' if tariff == 'hourly' else '–Ω–æ—á–Ω–æ–π'}:",
        reply_markup=get_date_selection_kb(tariff),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("choose_date|"))
async def handle_date_choice(callback: CallbackQuery, state: FSMContext):
    _, tariff, date_str = callback.data.split("|")
    await state.update_data(tariff=tariff, date=date_str)

    # –ü–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Å–æ–≤ "–æ—Ç"
    await callback.message.answer(
        f"‚úÖ –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: <b>{date_str}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è <b>—Å –∫–∞–∫–æ–≥–æ —á–∞—Å–∞</b> –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
        parse_mode="HTML"
    )

    slots_kb = generate_hour_buttons(date_str, tariff)
    await callback.message.answer("üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:", reply_markup=slots_kb)
    await state.set_state(BookingState.time_from)

    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("time_from|"))
async def handle_time_from(callback: CallbackQuery, state: FSMContext):
    _, from_hour = callback.data.split("|")
    from_hour = int(from_hour)

    data = await state.get_data()
    date = data.get("date")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å
    booked_ranges = get_booked_slots(date)
    is_busy = any(int(start) <= from_hour < int(end) for start, end in booked_ranges)

    if is_busy:
        await callback.answer("‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.", show_alert=True)
        return

    await state.update_data(time_from=from_hour)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ "–¥–æ –∫–∞–∫–æ–≥–æ —á–∞—Å–∞"
    buttons = []
    def getAfter_Hour(from_hour):
        return 23 if from_hour < 22 else 31
        
    for h in range(from_hour + 1, getAfter_Hour(from_hour)):  
        display_h = h if h < 24 else h - 24
        time_str = f"{display_h:02d}:00"
        buttons.append([InlineKeyboardButton(
            text=f"‚û°Ô∏è –î–æ {time_str}", callback_data=f"time_to|{h}"
        )])

    if from_hour > 23:
        from_hour -= 24

    text_msg = await callback.message.answer(
        f"üïì –û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞—á–∞–ª–∏ —Å <b>{from_hour:02d}:00</b>.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ <b>–¥–æ –∫–∞–∫–æ–≥–æ</b> —á–∞—Å–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode="HTML"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(delete_msg_ids=[text_msg.message_id, callback.message.message_id])

    await state.set_state(BookingState.time_to)
    await callback.answer()


# –≤—Ñ—Ü–≤—Ñ—Ü –≤—Ñ—Ü–≤—Ñ—Ü –≤—Ñ—Ü–≤—Ñ—Ü
@router.callback_query(lambda c: c.data.startswith("time_to|"))
async def handle_time_to(callback: CallbackQuery, state: FSMContext):
    _, to_hour = callback.data.split("|")
    to_hour = int(to_hour)

    data = await state.get_data()
    date = data['date']
    from_hour = data['time_from']
    tariff = data['tariff']
    user_id = callback.from_user.id

    # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å
    success = add_booking(user_id, date, str(from_hour), str(to_hour), tariff)

    # –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —á–∞—Å–∞–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    msg_ids = data.get("delete_msg_ids", [])
    for msg_id in msg_ids:
        try:
            await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=msg_id)
        except:
            pass  # —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞

    def format_hour(hour: int) -> str:
        return f"{hour % 24:02d}:00"

    if not success:
        await callback.message.answer("‚ùå –ö—Ç–æ-—Ç–æ —É–∂–µ —É—Å–ø–µ–ª –∑–∞–Ω—è—Ç—å —ç—Ç–æ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª.")
        await state.clear()
        await callback.answer()
        return

    await callback.message.answer(
        f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ <b>{date}</b>\n"
        f"üïê –í—Ä–µ–º—è: <b>{format_hour(from_hour)} ‚Äì {format_hour(to_hour)}</b>\n"
        f"üì¶ –¢–∞—Ä–∏—Ñ: <b>{'–ü–æ—á–∞—Å–æ–≤–æ–π' if tariff == 'hourly' else '–ù–æ—á–Ω–æ–π'}</b>",
        parse_mode="HTML"
    )

    await callback.bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"üì• <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username or '–±–µ–∑ username'} | <code>{callback.from_user.id}</code>\n"
            f"üìÖ –î–∞—Ç–∞: <b>{date}</b>\n"
            f"‚è∞ –í—Ä–µ–º—è: <b>{format_hour(from_hour)} ‚Äì {format_hour(to_hour)}</b>\n"
            f"üì¶ –¢–∞—Ä–∏—Ñ: <b>{'–ü–æ—á–∞—Å–æ–≤–æ–π' if tariff == 'hourly' else '–ù–æ—á–Ω–æ–π'}</b>"
        ),
        parse_mode="HTML"
    )

    await state.clear()
    await callback.answer()



@router.callback_query(lambda c: c.data.startswith("confirm_booking|"))
async def confirm_booking(callback: CallbackQuery):
    _, booking_id = callback.data.split("|")
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE bookings SET confirmed = 1 WHERE id = ?", (booking_id,))
    conn.commit()
    conn.close()
    await callback.message.answer("‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ—é –∑–∞–ø–∏—Å—å.")
    await callback.answer()


from keyboards.booking_kb import get_booking_status_kb

@router.message(lambda m: m.text == "üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def my_bookings_menu(message: Message):
    await message.answer(
        "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏</b>",
        reply_markup=get_booking_status_kb(),
        parse_mode="HTML"
    )

from datetime import datetime

@router.callback_query(lambda c: c.data.startswith("bookings_"))
async def handle_booking_status(callback: CallbackQuery):
    user_id = callback.from_user.id
    status = callback.data.split("_")[1]

    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()

    now = datetime.now()

    if status == "active":
        cursor.execute("""
            SELECT id, date, time_from, time_to FROM bookings
            WHERE telegram_id = ? AND confirmed >= 0
        """, (user_id,))
        results = cursor.fetchall()
        def format_hour(hour_str):
            return f"{int(hour_str) % 24:02d}:00"
        if not results:
            await callback.message.answer("<b>üü¢ –í–∞—à–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏:</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.", parse_mode="HTML")
        else:
            await callback.message.answer("<b>üü¢ –í–∞—à–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏:</b>", parse_mode="HTML")
            for rec in results:
                b_id, date, t_from, t_to = rec
                dt_start = datetime.strptime(f"{date} {int(t_from) % 24:02d}:00", "%Y-%m-%d %H:%M")
                if dt_start > now:
                    text = f"üìÖ {date} | ‚è∞ {format_hour(t_from)}‚Äì{format_hour(t_to)}"
                    keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{b_id}")]
                        ]
                    )
                    await callback.message.answer(text, reply_markup=keyboard)

    elif status == "cancelled":
        cursor.execute("""
            SELECT date, time_from, time_to FROM bookings
            WHERE telegram_id = ? AND confirmed = -1
        """, (user_id,))
        results = cursor.fetchall()
        text = "<b>üî¥ –û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:</b>\n\n"
        text += "\n".join(
            [f"üìÖ {r[0]} | ‚è∞ {r[1]}:00‚Äì{r[2]}:00" for r in results]
        ) or "–ù–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."
        await callback.message.answer(text, parse_mode="HTML")

    elif status == "past":
        cursor.execute("""
            SELECT date, time_from, time_to FROM bookings
            WHERE telegram_id = ? AND confirmed = 2
        """, (user_id,))
        results = cursor.fetchall()
        text = "<b>‚è≥ –ü—Ä–æ—à–µ–¥—à–∏–µ –∑–∞–ø–∏—Å–∏:</b>\n\n"
        text += "\n".join(
            [f"üìÖ {r[0]} | ‚è∞ {r[1]}:00‚Äì{r[2]}:00" for r in results]
        ) or "–ù–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–ø–∏—Å–µ–π."
        await callback.message.answer(text, parse_mode="HTML")

    else:
        await callback.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å.")

    conn.close()
    await callback.answer()

@router.message(lambda m: m.text and m.text.startswith("/cancel_"))
async def cancel_booking(message: Message):
    try:
        booking_id = int(message.text.replace("/cancel_", ""))
        conn = sqlite3.connect("users.db")
        c = conn.cursor()
        c.execute("UPDATE bookings SET confirmed = -1 WHERE id = ?", (booking_id,))
        conn.commit()
        conn.close()
        await message.answer("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.")


@router.callback_query(lambda c: c.data.startswith("user_came|"))
async def mark_user_came(callback: CallbackQuery):
    import sqlite3
    from datetime import datetime

    _, booking_id = callback.data.split("|")
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∑–∞–ø–∏—Å–∏
    cursor.execute("SELECT user_id FROM bookings WHERE id = ?", (booking_id,))
    result = cursor.fetchone()
    if not result:
        await callback.message.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return

    user_id = result[0]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ "–ø—Ä–∏—à—ë–ª"
    cursor.execute("UPDATE bookings SET confirmed = 2 WHERE id = ?", (booking_id,))

    # –ù–∞—á–∏—Å–ª—è–µ–º 2 –º–æ–Ω–µ—Ç—ã
    cursor.execute("UPDATE users SET coins = coins + 2 WHERE telegram_id = ?", (user_id,))

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –º–æ–Ω–µ—Ç
    cursor.execute(
        "INSERT INTO coin_history (user_id, amount, type, description, timestamp) VALUES (?, ?, ?, ?, ?)",
        (user_id, 2, 'income', '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–∞', datetime.now().isoformat())
    )

    conn.commit()
    conn.close()

    await callback.message.edit_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–∏—à–µ–¥—à–∏–π –∏ –ø–æ–ª—É—á–∏–ª 2 STRAWBERRY Coin!")
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("cancel_") and c.data.split("_")[1].isdigit())
async def handle_cancel_booking(callback: CallbackQuery):
    booking_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –±—Ä–æ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –µ—â—ë –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞
    cursor.execute("""
        SELECT id FROM bookings 
        WHERE id = ? AND telegram_id = ? AND confirmed >= 0
    """, (booking_id, user_id))
    booking = cursor.fetchone()

    if booking:
        cursor.execute("""
            UPDATE bookings SET confirmed = -1 WHERE id = ?
        """, (booking_id,))
        conn.commit()
        await callback.message.edit_text("‚ùå –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await callback.answer("–≠—Ç–∞ –∑–∞–ø–∏—Å—å —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", show_alert=True)

    conn.close()
    await callback.answer()