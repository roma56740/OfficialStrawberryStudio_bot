from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from keyboards.location_kb import location_kb

router = Router()

@router.message(F.text == "üìç –ì–¥–µ –º—ã")
async def location_handler(message: Message):
    # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo_path = "media/loc.jpg"  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–æ—Ç–æ –µ—Å—Ç—å –ø–æ —ç—Ç–æ–º—É –ø—É—Ç–∏

    # –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
    caption = (
        "<b>üìç –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –∑–¥–µ—Å—å!</b>\n\n"
        "STRAWBERRY STUDIO ‚Äî —É—é—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –∑–∞–ø–∏—Å–∏.\n"
        "üé∂ –ó–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ –∑–∞–ø–∏—Å—å, –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å—Å—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π!"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ + –∫–Ω–æ–ø–∫–∞ —Å –∞–¥—Ä–µ—Å–æ–º
    photo = FSInputFile(photo_path)
    await message.answer_photo(
        photo=photo,
        caption=caption,
        reply_markup=location_kb(),
        parse_mode="HTML"
    )



from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from datetime import datetime, timedelta, date
from db import get_db_connection
from keyboards.admin_kb import get_record_type_keyboard, get_record_period_keyboard
 



def normalize_hour(hour):
    hour = int(hour)
    if hour >= 24:
        return f"{hour - 24:02d}:00"
    return f"{hour:02d}:00"

@router.message(F.text == "üìÅ –í—Å–µ –∑–∞–ø–∏—Å–∏")
async def all_records_handler(message: Message):
    await message.answer(
        "üìÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–µ–π:</b>",
        reply_markup=get_record_type_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("records_"))
async def choose_record_period(callback: CallbackQuery):
    record_type = callback.data.split("_")[1]  # past –∏–ª–∏ future
    await callback.message.edit_text(
        "üìÜ <b>–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –∑–∞–ø–∏—Å–∏?</b>",
        reply_markup=get_record_period_keyboard(f"{record_type}"),
        parse_mode="HTML"
    )

@router.callback_query(F.data.regexp(r"^(past|future)_\d+d$"))
async def show_records(callback: CallbackQuery):
    conn = get_db_connection()
    c = conn.cursor()

    _, period = callback.data.split("_")
    days = int(period.replace("d", ""))
    since = datetime.now() - timedelta(days=days)
    today = date.today()

    is_future = callback.data.startswith("future")

    if is_future:
        c.execute("""
            SELECT b.date, b.time_from, b.time_to, b.tariff, b.confirmed, b.attended,
                   u.full_name, u.username
            FROM bookings b
            JOIN users u ON b.telegram_id = u.telegram_id
            WHERE DATE(b.date) >= ? AND b.confirmed != -1
            ORDER BY b.date, b.time_from
        """, (today.isoformat(),))
        label = "–±—É–¥—É—â–∏–µ"
    else:
        c.execute("""
            SELECT b.date, b.time_from, b.time_to, b.tariff, b.confirmed, b.attended,
                   u.full_name, u.username
            FROM bookings b
            JOIN users u ON b.telegram_id = u.telegram_id
            WHERE DATE(b.date) < ? AND DATE(b.date) >= ? AND b.confirmed != -1
            ORDER BY b.date DESC, b.time_from
        """, (today.isoformat(), (today - timedelta(days=days)).isoformat()))
        label = "–ø—Ä–æ—à–µ–¥—à–∏–µ"

    rows = c.fetchall()
    conn.close()

    if not rows:
        await callback.message.edit_text(f"üìÇ <b>–ù–µ—Ç {label} –∑–∞–ø–∏—Å–µ–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.</b>", parse_mode="HTML")
        return

    text = f"üìã <b>{label.capitalize()} –∑–∞–ø–∏—Å–∏ –∑–∞ {days} –¥–Ω.:</b>\n\n"
    for i, (date_, time_from, time_to, tariff, confirmed, attended, full_name, username) in enumerate(rows, start=1):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if confirmed == 2 or attended == 1:
            status = "üéâ –ü—Ä–æ–π–¥–µ–Ω–∞"
        elif confirmed == 1:
            status = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
        elif confirmed == 0:
            if datetime.strptime(date_, "%Y-%m-%d").date() >= today:
                status = "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏"
            else:
                status = "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
        else:
            status = "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"

        text += (
            f"<b>{i}. {date_}</b> ‚Äî <b>{normalize_hour(time_from)}‚Äì{normalize_hour(time_to)}</b>\n"
            f"üë§ {full_name} (@{username})\n"
            f"üé´ –¢–∞—Ä–∏—Ñ: {tariff.capitalize()}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {status}\n\n"
        )

    await callback.message.edit_text(text.strip(), parse_mode="HTML")


from aiogram.fsm.state import StatesGroup, State

class CoinsFSM(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_action = State()
    waiting_for_amount = State()

from aiogram import Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from db import get_user_coins, update_user_coins


@router.message(lambda msg: msg.text == "üçì –ú–æ–Ω–µ—Ç—ã")
async def handle_coins_button(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(CoinsFSM.waiting_for_user_id)

@router.message(CoinsFSM.waiting_for_user_id)
async def process_user_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        coins = get_user_coins(user_id)
        await state.update_data(user_id=user_id)
        await message.answer(
            f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–µ–π—á–∞—Å {coins} <b>STRAWBERRY Coin</b>.\n"
            f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å"), KeyboardButton(text="‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å")],
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(CoinsFSM.waiting_for_action)
    except:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(CoinsFSM.waiting_for_action)
async def process_action(message: Message, state: FSMContext):
    action = message.text
    if action not in ("‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å", "‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å"):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏.")
        return
    await state.update_data(action=action)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤:")
    await state.set_state(CoinsFSM.waiting_for_amount)

@router.message(CoinsFSM.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext):
    from keyboards.admin_kb import admin_keyboard
    try:
        amount = int(message.text)
        data = await state.get_data()
        user_id = data["user_id"]
        action = data["action"]
        current = get_user_coins(user_id)
        if action == "‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å":
            new = current + amount
        else:
            new = max(0, current - amount)
        update_user_coins(user_id, new)
        await message.answer(
            f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Ç–µ–ø–µ—Ä—å {new} <b>STRAWBERRY Coin</b>.",
            reply_markup=admin_keyboard
        )
        await state.clear()
    except:
        await message.answer("–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
