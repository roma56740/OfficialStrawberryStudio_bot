from aiogram import Bot, types, Router
from aiogram.types import Message
from db import is_user_registered, get_referral_count

router = Router()

@router.message(lambda message: message.text == "ü§ù –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
async def referral_link_handler(message: Message, bot: Bot):
    telegram_id = message.from_user.id

    if not is_user_registered(telegram_id):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return

    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ —á–µ—Ä–µ–∑ get_me
    bot_info = await bot.get_me()
    bot_username = bot_info.username

    invite_link = f"https://t.me/{bot_username}?start={telegram_id}"
    invited_count = get_referral_count(telegram_id)

    await message.answer(
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{invite_link}\n\n"
        f"–í—ã —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {invited_count} —á–µ–ª–æ–≤–µ–∫(–∞)."
    )





from aiogram import F, Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from db import get_db_connection
from aiogram.exceptions import TelegramAPIError
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery


class MailingState(StatesGroup):
    waiting_for_text = State()
    waiting_for_photo = State()
    waiting_for_confirmation = State()


@router.message(F.text == "üì® –†–∞—Å—Å—ã–ª–∫–∞")
async def ask_mailing_text(message: Message, state: FSMContext):
    await message.answer("üì¨ <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>", parse_mode="HTML")
    await state.set_state(MailingState.waiting_for_text)    


@router.message(MailingState.waiting_for_text)
async def ask_mailing_photo(message: Message, state: FSMContext):
    await state.update_data(mailing_text=message.text)
    await message.answer("üì∑ <b>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.</b>", parse_mode="HTML")
    await state.set_state(MailingState.waiting_for_photo)


 

@router.message(MailingState.waiting_for_photo, F.photo)
async def ask_for_confirmation(message: Message, state: FSMContext):
    data = await state.get_data()
    mailing_text = data.get("mailing_text")
    photo = message.photo[-1].file_id  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

    await state.update_data(photo_id=photo)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_mailing"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_mailing")
        ]
    ])

    await message.answer_photo(
        photo=photo,
        caption=f"<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?</b>\n\n{mailing_text}",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(MailingState.waiting_for_confirmation)



@router.callback_query(F.data == "confirm_mailing")
async def confirm_and_send(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    mailing_text = data.get("mailing_text")
    photo = data.get("photo_id")

    conn = get_db_connection()
    c = conn.cursor()
    c.execute("SELECT telegram_id FROM users")
    users = c.fetchall()
    conn.close()

    success = 0
    failed = 0

    await callback.message.edit_caption("üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

    for (user_id,) in users:
        try:
            await callback.bot.send_photo(chat_id=user_id, photo=photo, caption=mailing_text)
            success += 1
        except Exception:
            failed += 1

    await callback.message.answer(
        f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed}",
        parse_mode="HTML"
    )
    await state.clear()
    await callback.answer()

@router.message(MailingState.waiting_for_photo)
async def not_photo_warning(message: Message):
    await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")


@router.callback_query(F.data == "cancel_mailing")
async def cancel_mailing(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_caption("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    await callback.answer()





def get_user_shop_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –º–æ–Ω–µ—Ç", callback_data="shop_history")],
        [InlineKeyboardButton(text="üéÅ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="shop_my_purchases")],
        [InlineKeyboardButton(text="üõí –¢–æ–≤–∞—Ä—ã", callback_data="shop_items")],
        # [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")],
    ])


from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from db import get_user, get_coin_history, get_active_purchases, get_all_shop_items, purchase_item



@router.message(F.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
async def user_shop_menu(message: Message):
    if not is_user_registered(message.from_user.id):
        await message.answer("‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω.")
        return

    text = (
        "üõçÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:\n"
        "üî∏ <b>–ò—Å—Ç–æ—Ä–∏—è –º–æ–Ω–µ—Ç</b> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∏ —Å–ø–∏—Å–∞–Ω–∏–π\n"
        "üî∏ <b>–ü–æ–∫—É–ø–∫–∏</b> ‚Äî –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n"
        "üî∏ <b>–¢–æ–≤–∞—Ä—ã</b> ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n"
    )
    await message.answer(text, reply_markup=get_user_shop_menu_kb(), parse_mode="HTML")


@router.callback_query(F.data == "shop_history")
async def show_coin_history(callback: CallbackQuery):
    history = get_coin_history(callback.from_user.id)

    if not history:
        await callback.message.edit_text("üìú <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ –º–æ–Ω–µ—Ç–∞–º.</b>", parse_mode="HTML")
        return

    text = "<b>üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ –º–æ–Ω–µ—Ç–∞–º:</b>\n\n"
    for entry in history:
        sign = "‚ûï" if entry["amount"] > 0 else "‚ûñ"
        text += (
            f"{sign} <b>{abs(entry['amount'])} STRAWBERRY Coin</b>\n"
            f"üìÑ {entry['description']}\n"
            f"üïí {entry['timestamp']}\n\n"
        )
    await callback.message.edit_text(text, parse_mode="HTML")



@router.callback_query(F.data == "shop_my_purchases")
async def show_user_purchases(callback: CallbackQuery):
    purchases = get_active_purchases(callback.from_user.id)

    if not purchases:
        await callback.message.edit_text("üéÅ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫.</b>", parse_mode="HTML")
        return

    await callback.message.edit_text("<b>üéÅ –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:</b>\n", parse_mode="HTML")
    
    for item in purchases:
        text = (
            f"üì¶ <b>{item['name']}</b>\n"
            f"üîë –ö–æ–¥: <code>{item['code']}</code>\n"
            f"üìÑ {item['description']}"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÅ –í–æ–∑–≤—Ä–∞—Ç", callback_data=f"return_{item['id']}")]
        ])
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(lambda c: c.data.startswith("return_"))
async def handle_purchase_return(callback: CallbackQuery):
    import sqlite3
    purchase_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫—É
    conn = sqlite3.connect("users.db")
    conn.row_factory = sqlite3.Row
    c = conn.cursor()
    c.execute("SELECT * FROM purchases WHERE id = ? AND telegram_id = ? AND status = 'active'", (purchase_id, user_id))
    purchase = c.fetchone()

    if not purchase:
        await callback.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å: –ø–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
    c.execute("SELECT price FROM shop_items WHERE id = ?", (purchase["shop_item_id"],))
    item = c.fetchone()
    if not item:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    coins_to_return = item["price"]

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–Ω–µ—Ç—ã
    c.execute("UPDATE users SET coins = coins + ? WHERE telegram_id = ?", (coins_to_return, user_id))

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏
    c.execute("UPDATE purchases SET status = 'returned' WHERE id = ?", (purchase_id,))

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    from datetime import datetime
    c.execute(
        "INSERT INTO coin_history (telegram_id, action, amount, description, timestamp) VALUES (?, ?, ?, ?, ?)",
        (user_id, "refund", coins_to_return, f"–í–æ–∑–≤—Ä–∞—Ç –∑–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞ ID {purchase_id}", datetime.now().isoformat())
    )

    conn.commit()
    conn.close()

    await callback.message.edit_text("‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞. –ú–æ–Ω–µ—Ç—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ.")
    await callback.answer()

@router.callback_query(F.data == "shop_items")
async def show_shop_items(callback: CallbackQuery):
    items = get_all_shop_items()

    if not items:
        await callback.message.edit_text("üõí <b>–í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.</b>", parse_mode="HTML")
        return

    text = "<b>üõçÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>\n\n"
    kb = []
    for item in items:
        text += (
            f"üì¶ <b>{item['name']}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{item['price']}</b> <b>STRAWBERRY Coin</b>\n"
            f"üìÑ {item['description']}\n\n"
        )
        kb.append([InlineKeyboardButton(
            text=f"üõí –ö—É–ø–∏—Ç—å: {item['name']}", callback_data=f"buy_{item['id']}"
        )])

    await callback.message.edit_text(text.strip(), reply_markup=InlineKeyboardMarkup(inline_keyboard=kb), parse_mode="HTML")


@router.callback_query(F.data.startswith("buy_"))
async def handle_buy(callback: CallbackQuery):
    item_id = int(callback.data.split("_")[1])
    success, msg = purchase_item(callback.from_user.id, item_id)
    await callback.answer(msg, show_alert=True)

    if success:
        await callback.message.answer("‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –í–∞—à –∫–æ–¥ –æ—Ç–æ–±—Ä–∞–∂—ë–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–∫—É–ø–∫–∏'.")


class RefBonusState(StatesGroup):
    waiting_for_new_bonus = State()

from db import get_referral_bonus, set_referral_bonus

@router.callback_query(F.data.startswith("user_ref_bonus:"))
async def ask_new_ref_bonus(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(":")[1])
    await state.update_data(user_id=user_id)

    current_bonus = get_referral_bonus()

    await callback.message.answer(
        f"üéÅ –¢–µ–∫—É—â–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: <b>{current_bonus}</b> –º–æ–Ω–µ—Ç.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ.",
        parse_mode="HTML"
    )
    await state.set_state(RefBonusState.waiting_for_new_bonus)
    await callback.answer()

@router.message(RefBonusState.waiting_for_new_bonus)
async def set_new_ref_bonus(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –∏–ª–∏ 15).")
        return

    bonus = int(message.text)
    set_referral_bonus(bonus)

    await message.answer(f"‚úÖ –ù–æ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <b>{bonus}</b> –º–æ–Ω–µ—Ç.", parse_mode="HTML")
    await state.clear()


class ReferralBonusState(StatesGroup):
    waiting_for_bonus = State()

@router.message(F.text == "üéÅ –†–µ—Ñ. –ù–∞–≥—Ä–∞–¥–∞")
async def ask_referral_bonus(msg: Message, state: FSMContext):
    current_bonus = get_referral_bonus()
    await msg.answer(f"üéÅ –°–µ–π—á–∞—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—ë—Ç—Å—è <b>{current_bonus}</b> –º–æ–Ω–µ—Ç.\n\n"
                     "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞:", parse_mode="HTML")
    await state.set_state(ReferralBonusState.waiting_for_bonus)

@router.message(ReferralBonusState.waiting_for_bonus)
async def set_new_referral_bonus(msg: Message, state: FSMContext):
    if not msg.text.isdigit() or int(msg.text) < 0:
        await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    amount = int(msg.text)
    set_referral_bonus(amount)
    await msg.answer(f"‚úÖ –ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω! –¢–µ–ø–µ—Ä—å –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è <b>{amount}</b> –º–æ–Ω–µ—Ç.", parse_mode="HTML")
    await state.clear()
