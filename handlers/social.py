from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from keyboards.social_kb import social_links_kb
import os

router = Router()

@router.message(F.text == "üì± –°–æ—Ü. —Å–µ—Ç–∏")
async def social_handler(message: Message):
    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    photo_path = "media/social.jpg"  # –ü–æ–º–µ—Å—Ç–∏ —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–∏ –ø—É—Ç—å

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    caption = (
        "<b>STRAWBERRY STUDIO üçì</b>\n\n"
        "üéß –ú–µ—Å—Ç–æ, –≥–¥–µ —Ä–æ–∂–¥–∞–µ—Ç—Å—è –∑–≤—É–∫.\n\n"
        "üéôÔ∏è –ú—ã —Å–æ–∑–¥–∞—ë–º –º—É–∑—ã–∫—É, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ–∫–∞–ª –∏ –¥–µ–ª–∞–µ–º –º–∞–≥–∏—é —Å –∫–∞–∂–¥–æ–π –Ω–æ—Ç–æ–π.\n\n"
        "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö üëá"
    )

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
    photo = FSInputFile(photo_path)
    await message.answer_photo(
        photo=photo,
        caption=caption,
        reply_markup=social_links_kb(),
        parse_mode="HTML"
    )

from db import get_user_coins
from db import is_user_registered
@router.message(lambda msg: msg.text == "üçì –ú–æ–∏ –º–æ–Ω–µ—Ç—ã")
async def my_coins_handler(message: Message):
    user_id = message.from_user.id

    if not is_user_registered(user_id):
        await message.answer(
            "<b>‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ <b>STRAWBERRY Coin</b> –∏ –¥—Ä—É–≥–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            parse_mode="HTML"
        )
        return

    coins = get_user_coins(user_id)
    await message.answer(f"üí∞ –£ –≤–∞—Å {coins} <b>STRAWBERRY Coin</b> üçì")



from aiogram import Router, types
from aiogram.types import CallbackQuery, Message
from datetime import datetime, timedelta
from keyboards.admin_kb import get_statistics_period_keyboard
from db import get_db_connection

@router.message(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics_entry(message: Message):
    await message.answer(
        "üìà <b>–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?</b>",
        reply_markup=get_statistics_period_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data.startswith("stats_"))
async def show_statistics(callback: CallbackQuery):
    from datetime import datetime, timedelta, date
    period_map = {
        "stats_1d": ("1 –¥–µ–Ω—å", 1),
        "stats_7d": ("7 –¥–Ω–µ–π", 7),
        "stats_30d": ("30 –¥–Ω–µ–π", 30)
    }

    label, days = period_map.get(callback.data, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", 1))
    since = (datetime.now() - timedelta(days=days)).date()
    today = date.today()

    conn = get_db_connection()
    c = conn.cursor()

    # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    c.execute("SELECT COUNT(*) FROM users WHERE is_registered = 1 AND DATE(registration_date) >= ?", (since,))
    new_users = c.fetchone()[0]

    # –í—Å–µ –∑–∞–ø–∏—Å–∏
    c.execute("SELECT COUNT(*) FROM bookings WHERE DATE(date) >= ?", (since,))
    total_bookings = c.fetchone()[0]

    # –û—Ç–º–µ–Ω–µ–Ω–æ
    c.execute("SELECT COUNT(*) FROM bookings WHERE confirmed = 0 AND DATE(date) < ? AND DATE(date) >= ?", (today, since))
    canceled = c.fetchone()[0]

    # –í –æ–∂–∏–¥–∞–Ω–∏–∏
    c.execute("SELECT COUNT(*) FROM bookings WHERE confirmed = 0 AND DATE(date) >= ? AND DATE(date) >= ?", (today, since))
    pending = c.fetchone()[0]

    bought = 0  # –ø–æ–∫–∞ –Ω–µ—Ç –ª–æ–≥–∏–∫–∏ –ø–æ–∫—É–ø–æ–∫

    conn.close()

    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {label}:</b>\n\n"
        f"üë§ <b>–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {new_users}\n"
        f"üéü <b>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:</b> {total_bookings}\n"  
        f"üõí <b>–ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> {bought}"
    )

    await callback.message.edit_text(text, parse_mode="HTML")



from aiogram import Router, types
from aiogram.types import Message, CallbackQuery
from keyboards.admin_kb import get_shop_management_keyboard
 

@router.message(lambda m: m.text == "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω")
async def open_shop_settings(message: Message):
    await message.answer(
        "<b>üõçÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=get_shop_management_keyboard(),
        parse_mode="HTML"
    )


from aiogram.fsm.context import FSMContext
from fsm.shop_states import ShopCreate, ShopEdit
from db import get_db_connection

@router.callback_query(lambda c: c.data == "shop_create")
async def start_shop_create(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>:", parse_mode="HTML")
    await state.set_state(ShopCreate.waiting_for_name)

@router.message(ShopCreate.waiting_for_name)
async def shop_set_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>:", parse_mode="HTML")
    await state.set_state(ShopCreate.waiting_for_description)

@router.message(ShopCreate.waiting_for_description)
async def shop_set_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ <b>—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞</b> –≤ <b>STRAWBERRY Coin</b> (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", parse_mode="HTML")
    await state.set_state(ShopCreate.waiting_for_price)

@router.message(ShopCreate.waiting_for_price)
async def shop_set_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(price=int(message.text))
    data = await state.get_data()

    conn = get_db_connection()
    c = conn.cursor()
    c.execute("INSERT INTO shop_items (name, description, price) VALUES (?, ?, ?)", (
        data["name"], data["description"], data["price"]
    ))
    conn.commit()
    conn.close()

    await message.answer(
        f"‚úÖ –¢–æ–≤–∞—Ä <b>¬´{data['name']}¬ª</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {data['price']} <b>STRAWBERRY Coin</b>",
        parse_mode="HTML"
    )
    await state.clear()


@router.callback_query(lambda c: c.data == "shop_view")
async def show_shop_items(callback: CallbackQuery):
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("SELECT id, name, description, price FROM shop_items")
    items = c.fetchall()
    conn.close()

    if not items:
        await callback.message.edit_text("üì¶ –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    text = "<b>üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n\n"
    for i, (item_id, name, description, price) in enumerate(items, start=1):
        text += (
            f"{i}. üéÅ <b>{name}</b>\n"
            f"   üí¨ {description}\n"
            f"   üí∞ <b>{price} STRAWBERRY Coin</b>\n\n"
        )

    await callback.message.edit_text(text.strip(), parse_mode="HTML")


from html import escape as quote_html
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def get_delete_item_keyboard(items):
    keyboard = []
    for item_id, name in items:
        button = InlineKeyboardButton(text=f"‚ùå {name}", callback_data=f"delete_item_{item_id}")
        keyboard.append([button])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(lambda c: c.data == "shop_delete")
async def choose_item_to_delete(callback: CallbackQuery):
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("SELECT id, name FROM shop_items")
    items = c.fetchall()
    conn.close()

    if not items:
        await callback.message.edit_text("üì¶ –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    await callback.message.edit_text(
        "‚ùå <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:</b>",
        reply_markup=get_delete_item_keyboard(items),
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data.startswith("delete_item_"))
async def delete_item(callback: CallbackQuery):
    item_id = int(callback.data.split("_")[2])

    conn = get_db_connection()
    c = conn.cursor()
    c.execute("SELECT name FROM shop_items WHERE id = ?", (item_id,))
    row = c.fetchone()

    if row:
        name = row[0]
        c.execute("DELETE FROM shop_items WHERE id = ?", (item_id,))
        conn.commit()
        await callback.message.edit_text(f"‚ùå –¢–æ–≤–∞—Ä <b>¬´{quote_html(name)}¬ª</b> —É–¥–∞–ª—ë–Ω –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.", parse_mode="HTML")
    else:
        await callback.message.edit_text("‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    conn.close()


@router.callback_query(lambda c: c.data == "shop_edit")
async def choose_item_to_edit(callback: CallbackQuery, state: FSMContext):
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("SELECT id, name FROM shop_items")
    items = c.fetchall()
    conn.close()

    if not items:
        await callback.message.edit_text("üì¶ –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚úèÔ∏è {name}", callback_data=f"edit_item_{item_id}")]
        for item_id, name in items
    ])

    await callback.message.edit_text(
        "‚úèÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(lambda c: c.data.startswith("edit_item_"))
async def start_edit_item(callback: CallbackQuery, state: FSMContext):
    item_id = int(callback.data.split("_")[2])
    await state.update_data(item_id=item_id)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b> –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª", parse_mode="HTML")
    await state.set_state(ShopEdit.editing_name)


@router.message(ShopEdit.editing_name)
async def edit_name(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        conn = get_db_connection()
        c = conn.cursor()
        c.execute("UPDATE shop_items SET name = ? WHERE id = ?", (message.text, data['item_id']))
        conn.commit()
        conn.close()
    await message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b> –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª", parse_mode="HTML")
    await state.set_state(ShopEdit.editing_description)

@router.message(ShopEdit.editing_description)
async def edit_description(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        conn = get_db_connection()
        c = conn.cursor()
        c.execute("UPDATE shop_items SET description = ? WHERE id = ?", (message.text, data['item_id']))
        conn.commit()
        conn.close()
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—É—é —Ü–µ–Ω—É</b> –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª", parse_mode="HTML")
    await state.set_state(ShopEdit.editing_price)

@router.message(ShopEdit.editing_price)
async def edit_price(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        if not message.text.isdigit():
            await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
            return
        conn = get_db_connection()
        c = conn.cursor()
        c.execute("UPDATE shop_items SET price = ? WHERE id = ?", (int(message.text), data['item_id']))
        conn.commit()
        conn.close()

    await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", parse_mode="HTML")
    await state.clear()
