from aiogram import Router
from aiogram.types import Message, FSInputFile
from aiogram.utils.markdown import hbold, hitalic
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import os

from keyboards.user_kb import get_user_keyboard
from keyboards.admin_kb import admin_keyboard
from db import user_exists, add_user, is_user_registered, get_username_by_id, add_referral_bonus
from aiogram.types import CallbackQuery
from dotenv import load_dotenv
from db import set_invited_by

router = Router()

load_dotenv()
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))


@router.message(lambda msg: msg.text and msg.text.startswith("/start"))
async def start_handler(message: Message):
    print(f"[DEBUG] message.text = {message.text}")

    telegram_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username or ""

    inviter_id = None

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "/start 123456789" –∏ "/start_123456789"
    if " " in message.text:
        try:
            inviter_id = int(message.text.split(" ", 1)[1])
        except ValueError:
            inviter_id = None
    elif "_" in message.text:
        try:
            inviter_id = int(message.text.split("_", 1)[1])
        except ValueError:
            inviter_id = None

    print(f"[START] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞. –ü—Ä–∏–≥–ª–∞—Å–∏–ª: {inviter_id}")

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if telegram_id == ADMIN_ID:
        await message.answer(
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.</b>",
            reply_markup=admin_keyboard,
            parse_mode="HTML"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_new = not user_exists(telegram_id)
    print(f"[START] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å? {'–î–∞' if is_new else '–ù–µ—Ç'}")

    if is_new:
        add_user(telegram_id, full_name, username, inviter_id)
        print(f"[START] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–æ–±–∞–≤–ª–µ–Ω. –ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π: {inviter_id}")

        if inviter_id:
            inviter_username = get_username_by_id(inviter_id)
            if inviter_username:
                await message.answer(f"üéâ –í—ã –ø—Ä–∏—à–ª–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –æ—Ç @{inviter_username}!")
            else:
                await message.answer("üéâ –í—ã –ø—Ä–∏—à–ª–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é!")
    else:
        if inviter_id:
            was_set = set_invited_by(telegram_id, inviter_id)
            print(f"[START] –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ: {inviter_id} ‚Üí {'—É—Å–ø–µ—à–Ω–æ' if was_set else '—É–∂–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
            if was_set:
                inviter_username = get_username_by_id(inviter_id)
                if inviter_username:
                    await message.answer(f"üéâ –í—ã –ø—Ä–∏—à–ª–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –æ—Ç @{inviter_username}!")
                else:
                    await message.answer("üéâ –í—ã –ø—Ä–∏—à–ª–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é!")

    registered = is_user_registered(telegram_id)

    # –ö–Ω–æ–ø–∫–∞ "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç"
    how_it_works_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéß –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?", callback_data="how_it_works")]
    ])

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    photo = FSInputFile("media/welcome.jpg")
    text = (
        f"{hbold('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ STRAWBERRY STUDIO!')} üé∂\n\n"
        f"{hitalic('–° –Ω–∞–º–∏ —Ç—ã —Å–º–æ–∂–µ—à—å –ª–µ–≥–∫–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Å—Å–∏–∏, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏—è, –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. ')}\n\n"
        f"<code>–ü—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—É—Å—Ç—É–ø –∫ —Å–∫–∏–¥–∫–∞–º, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, –º–∞–≥–∞–∑–∏–Ω—É –±–æ–Ω—É—Å–æ–≤ –∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏!</code>\n\n"
        f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ üëá"
    )

    await message.answer_photo(
        photo=photo,
        caption=text,
        reply_markup=how_it_works_kb,
        parse_mode="HTML"
    )

    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_user_keyboard(registered))




@router.callback_query(lambda c: c.data == "how_it_works")
async def how_it_works_handler(callback: CallbackQuery):
    text = (
        "üéß <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π —Å—Ç—É–¥–∏–µ–π –ª–µ–≥–∫–æ –∏ —É–¥–æ–±–Ω–æ:\n\n"
        "üìÖ <b>–ó–∞–ø–∏—Å—å –Ω–∞ —Å–µ—Å—Å–∏—é</b> ‚Äî –≤—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è, –∏ –≤—Å—ë –≥–æ—Ç–æ–≤–æ!\n"
        "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b> ‚Äî –±–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –∑–∞–ø–∏—Å–∏ –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã —Ç—ã –Ω–µ –∑–∞–±—ã–ª.\n"
        "‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è</b> ‚Äî –∑–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏ –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç, –ø—Ä–∏–¥—ë—à—å –ª–∏ —Ç—ã.\n"
        "üçì <b>–ú–æ–Ω–µ—Ç—ã</b> ‚Äî –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∏—à–µ–¥—à–∏–π —Å–µ–∞–Ω—Å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å <b>STRAWBERRY Coin</b>.\n"
        "üõç <b>–ú–∞–≥–∞–∑–∏–Ω</b> ‚Äî —Ç—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã –Ω–∞ –±–æ–Ω—É—Å—ã –∏ –ø—Ä–∏—è—Ç–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏.\n"
        "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b> ‚Äî –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –º–æ–Ω–µ—Ç—ã (–¥–æ 30)!\n"
        "üí¨ <b>–ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º</b> ‚Äî –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏ –æ –ø—Ä–æ–±–ª–µ–º–µ –Ω–∞–ø—Ä—è–º—É—é.\n\n"
        "üöÄ –í—Å—ë –ø—Ä–æ—Å—Ç–æ, –±—ã—Å—Ç—Ä–æ –∏ –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤!"
    )

    await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()





from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from keyboards.admin_kb import get_user_action_keyboard, get_purchase_action_keyboard
from db import (
    get_user_by_username,
    get_user_bookings,
    get_user_purchases,
    mark_purchase_as_used
)

searched_users = {}

def get_status_choice_keyboard(user_id: int):
    options = [
        ("‚≠êÔ∏è VIP", "VIP"),
        ("üü† –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø–∏—Å–∏", "SKIPS"),
        ("üü• –ñ–∞–ª–æ–±–∞", "COMPLAINT"),
        ("üü¢ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π", "REGULAR"),
        ("‚ùå –£–±—Ä–∞—Ç—å —Å—Ç–∞—Ç—É—Å", "")
    ]

    keyboard = [
        [InlineKeyboardButton(text=label, callback_data=f"set_status:{user_id}:{value}")]
        for label, value in options
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def ask_for_username(msg: Message, state: FSMContext):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞.")

def normalize_hour(hour):
    hour = int(hour)
    if hour >= 24:
        return f"{hour - 24:02d}:00"
    return f"{hour:02d}:00"




@router.message(F.text.startswith("@"))
async def handle_username_search(msg: Message):
    username = msg.text.strip("@")
    user = get_user_by_username(username)

    if not user:
        await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    searched_users[msg.from_user.id] = user["telegram_id"]
    status = user.get('status') or '‚Äî'

    text = (
        f"üë§ <b>{user['full_name']}</b>\n"
        f"üÜî <code>{user['telegram_id']}</code>\n"
        f"üìõ Username: @{user['username']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '‚Äî')}\n"
        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.get('birthdate', '‚Äî')}\n"
        f"üî¢ –í–æ–∑—Ä–∞—Å—Ç: {user.get('age', '‚Äî')}\n"
        f"üçì –ú–æ–Ω–µ—Ç: {user.get('coins', 0)}\n"
        f"üè∑ –°—Ç–∞—Ç—É—Å: {status}"
    )

    await msg.answer(text, reply_markup=get_user_action_keyboard(user["telegram_id"]), parse_mode="HTML")


@router.callback_query(F.data.startswith("user_records:"))
async def show_user_bookings(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    bookings = get_user_bookings(user_id)

    if not bookings:
        await callback.message.answer("üìÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    text = "üìÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:</b>\n\n"
    for b in bookings:
        text += (
            f"üóì {b['date']} | {normalize_hour(b['time_from'])}‚Äì{normalize_hour(b['time_to'])}\n"
            f"üìå –¢–∞—Ä–∏—Ñ: {b['tariff'].capitalize()}\n"
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {'–î–∞' if b['confirmed'] else '–ù–µ—Ç'}\n\n"
        )

    await callback.message.answer(text, parse_mode="HTML")


@router.callback_query(F.data.startswith("user_purchases:"))
async def show_user_purchases(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    purchases = get_user_purchases(user_id)

    if not purchases:
        await callback.message.answer("üõí –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.")
        return

    for p in purchases:
        status = "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ" if p['status'] == 'used' else "üü° –ê–∫—Ç–∏–≤–Ω–æ"
        text = (
            f"üõç <b>{p['name']}</b>\n"
            f"üí¨ {p['description']}\n"
            f"üÜî –ö–æ–¥: <code>{p['code']}</code>\n"
            f"üìÖ –î–∞—Ç–∞: {p['timestamp']}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {status}"
        )

        markup = None
        if p['status'] != 'used':
            markup = get_purchase_action_keyboard(p['id'])

        await callback.message.answer(text, reply_markup=markup, parse_mode="HTML")


@router.callback_query(F.data.startswith("activate_purchase:"))
async def activate_purchase(callback: CallbackQuery):
    purchase_id = int(callback.data.split(":")[1])
    mark_purchase_as_used(purchase_id)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer("‚úÖ –ü–æ–∫—É–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")



import pandas as pd
from io import BytesIO
import sqlite3




def get_export_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="export_users"),
            InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∏", callback_data="export_bookings")
        ],
        [
            InlineKeyboardButton(text="üõí –ü–æ–∫—É–ø–∫–∏", callback_data="export_purchases"),
            InlineKeyboardButton(text="üçì –ò—Å—Ç–æ—Ä–∏—è –º–æ–Ω–µ—Ç", callback_data="export_coin_history")
        ]
    ])

@router.message(F.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç Excel")
async def export_menu(msg: Message):
    await msg.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=get_export_keyboard())


@router.callback_query(F.data.startswith("export_"))
async def export_table(callback: CallbackQuery):
    table = callback.data.replace("export_", "")
    db_path = "users.db"

    try:
        conn = sqlite3.connect(db_path)
        df = pd.read_sql_query(f"SELECT * FROM {table}", conn)
        conn.close()

        if df.empty:
            await callback.message.answer("‚ùå –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
            return

        buffer = BytesIO()
        df.to_excel(buffer, index=False)
        buffer.seek(0)

        from aiogram.types import BufferedInputFile

        file = BufferedInputFile(buffer.read(), filename=f"{table}.xlsx")
        await callback.message.answer_document(
            document=file,
            caption=f"üìÑ –¢–∞–±–ª–∏—Ü–∞: {table}"
        )
        await callback.answer()

    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")





















from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton 

def get_reply_to_user_keyboard(user_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_user:{user_id}")]
    ])

# 


class ChatWithAdmin(StatesGroup):
    waiting_user_message = State()
    waiting_admin_reply = State()


# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º"
@router.message(F.text == "üí¨ –ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º")
async def start_chat_with_admin(msg: Message, state: FSMContext):
    now_houer = datetime.now().hour
    if (22 < now_houer < 23) or (now_houer < 11):
        await msg.answer("–°–µ–π—á–∞—Å —Å—Ç—É–¥–∏—è –∑–∞–∫—Ä—ã—Ç–∞, –Ω–æ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º —Å 11:00 –¥–æ 22:00 üéß")

    await msg.answer("‚úç –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:")
    await state.set_state(ChatWithAdmin.waiting_user_message)


@router.message(ChatWithAdmin.waiting_user_message)
async def handle_user_message(msg: Message, state: FSMContext):
    await state.clear()

    text = (
        f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        f"<b>{msg.from_user.full_name}</b> (@{msg.from_user.username})\n"
        f"<code>{msg.from_user.id}</code>\n\n"
        f"{msg.text}"
    )

    await msg.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await msg.bot.send_message(
        chat_id=ADMIN_ID,
        text=text,
        reply_markup=get_reply_to_user_keyboard(msg.from_user.id),
        parse_mode="HTML"
    )


# --- –ê–¥–º–∏–Ω –Ω–∞–∂–∞–ª "–û—Ç–≤–µ—Ç–∏—Ç—å"
@router.callback_query(F.data.startswith("reply_to_user:"))
async def ask_admin_for_reply(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(":")[1])
    await state.update_data(reply_to=user_id)
    await callback.message.answer("‚úç –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    await state.set_state(ChatWithAdmin.waiting_admin_reply)
    await callback.answer()


# --- –ê–¥–º–∏–Ω –≤–≤—ë–ª —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@router.message(ChatWithAdmin.waiting_admin_reply)
async def handle_admin_reply(msg: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("reply_to")

    if not user_id:
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
        await state.clear()
        return

    await state.update_data(reply_text=msg.text)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì® –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data="confirm_admin_reply")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin_reply")]
    ])

    await msg.answer(
        f"üîî –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{msg.text}",
        reply_markup=markup
    )


# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
@router.callback_query(F.data == "confirm_admin_reply")
async def confirm_admin_reply(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("reply_to")
    reply_text = data.get("reply_text")

    if not user_id or not reply_text:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏.")
        await state.clear()
        return

    try:
        await callback.bot.send_message(
            chat_id=user_id,
            text=f"üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{reply_text}"
        )
        await callback.message.edit_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

    await state.clear()
    await callback.answer()


# --- –û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
@router.callback_query(F.data == "cancel_admin_reply")
async def cancel_admin_reply(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()


from aiogram.fsm.state import StatesGroup, State

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.register_kb import confirm_kb
from db import add_user_after_register, get_user
from datetime import datetime
import re

class EditUserState(StatesGroup):
    full_name = State()
    birth_date = State()
    phone = State()

class EditProfileState(StatesGroup):
    full_name = State()
    birthday = State()
    phone = State()
    confirm = State()



@router.callback_query(F.data.startswith("user_edit:"))
async def edit_user_start(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(":")[1])
    print("‚úÖ confirm_edit –≤—ã–∑–≤–∞–Ω")
    await state.update_data(user_id=user_id)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–§–ò–û</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", parse_mode="HTML")
    await state.set_state(EditProfileState.full_name)


@router.message(EditProfileState.full_name)
async def edit_full_name(msg: Message, state: FSMContext):
    text = msg.text.strip()
    parts = text.split()

    if len(parts) < 2 or not all(p.isalpha() for p in parts):
        await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ <b>–§–∞–º–∏–ª–∏—é –∏ –ò–º—è</b>, —Ä–∞–∑–¥–µ–ª—è—è –ø—Ä–æ–±–µ–ª–æ–º.")
        return

    formatted_name = ' '.join(part.capitalize() for part in parts)
    await state.update_data(full_name=formatted_name)
    await msg.answer("üìÜ –í–≤–µ–¥–∏—Ç–µ <b>–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", parse_mode="HTML")
    await state.set_state(EditProfileState.birthday)


@router.message(EditProfileState.birthday)
async def edit_birthday(msg: Message, state: FSMContext):
    try:
        b_date = datetime.strptime(msg.text.strip(), "%d.%m.%Y")
        today = datetime.today()
        age = today.year - b_date.year - ((today.month, today.day) < (b_date.month, b_date.day))

        if age < 0 or age > 100:
            await msg.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.")
            return

        await state.update_data(birth_date=b_date.strftime("%Y-%m-%d"), age=age)
        await msg.answer("üìû –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:", parse_mode="HTML")
        await state.set_state(EditProfileState.phone)

    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

def get_confirm_edit_keyboard(user_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_edit:{user_id}")]
    ])

@router.message(EditProfileState.phone)
async def edit_phone(msg: Message, state: FSMContext):
    phone = msg.text.strip()
    if not re.fullmatch(r"\+7\d{10}", phone):
        await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX")
        return

    await state.update_data(phone=phone)
    data = await state.get_data()

    text = (
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º:</b>\n\n"
        f"üë§ –§–ò–û: {data['full_name']}\n"
        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birth_date']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}"
    )

    data = await state.get_data()
    user_id = data.get("user_id")
    await msg.answer(text, reply_markup=get_confirm_edit_keyboard(user_id), parse_mode="HTML")
    await state.set_state(EditProfileState.confirm)

def update_user(telegram_id, full_name, birth_date, phone, age, underage):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("""
        UPDATE users SET
            full_name = ?,
            birthdate  = ?,
            phone = ?,
            age = ?,
            underage = ?
        WHERE telegram_id = ?
    """, (full_name, birth_date, phone, age, underage, telegram_id))
    conn.commit()
    conn.close()

@router.callback_query(F.data.startswith("confirm_edit:"))
async def confirm_edit(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(":")[1])
    data = await state.get_data()

    full_name = data.get("full_name")
    birth_date = data.get("birth_date")
    phone = data.get("phone")
    age = data.get("age")

    if not (full_name and birth_date and phone and age):
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        await state.clear()
        await callback.answer()
        return

    underage = int(age < 14)

    update_user(
        telegram_id=user_id,
        full_name=full_name,
        birth_date=birth_date,
        phone=phone,
        age=age,
        underage=underage
    )

    await callback.message.delete()
    await callback.message.answer(
        "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
        reply_markup=get_user_action_keyboard(user_id)
    )
    await state.clear()
    await callback.answer()

def get_delete_confirm_keyboard(user_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{user_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
        ]
    ])

@router.callback_query(F.data.startswith("user_delete:"))
async def ask_delete_confirmation(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    await callback.message.answer(
        f"‚ùóÔ∏è–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID <code>{user_id}</code>?",
        reply_markup=get_delete_confirm_keyboard(user_id),
        parse_mode="HTML"
    )
    await callback.answer()

import sqlite3

def delete_user(telegram_id: int):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("DELETE FROM users WHERE telegram_id = ?", (telegram_id,))
    c.execute("DELETE FROM bookings WHERE telegram_id = ?", (telegram_id,))
    c.execute("DELETE FROM purchases WHERE telegram_id = ?", (telegram_id,))
    c.execute("DELETE FROM coin_history WHERE telegram_id = ?", (telegram_id,))
    conn.commit()
    conn.close()

@router.callback_query(F.data.startswith("confirm_delete:"))
async def confirm_delete_user(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    delete_user(user_id)
    await callback.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –±—ã–ª —É–¥–∞–ª—ë–Ω.", parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "cancel_delete")
async def cancel_delete_user(callback: CallbackQuery):
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()


from db import get_coin_history

@router.callback_query(F.data.startswith("user_coins:"))
async def show_user_coin_history(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    history = get_coin_history(user_id)

    if not history:
        await callback.message.answer("üí∞ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–Ω–µ—Ç.")
        return

    text = "üí∞ <b>–ò—Å—Ç–æ—Ä–∏—è –º–æ–Ω–µ—Ç:</b>\n\n"
    for entry in history[:20]:  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 20 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
        amount = entry['amount']
        sign = "‚ûï" if amount > 0 else "‚ûñ"
        text += (
            f"{sign} <b>{abs(amount)}</b> –º–æ–Ω–µ—Ç ‚Äî {entry['description']}\n"
            f"üìÖ {entry['timestamp']}\n\n"
        )

    await callback.message.answer(text, parse_mode="HTML")


@router.callback_query(F.data.startswith("user_referrals:"))
async def show_user_referrals(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    
    conn = sqlite3.connect("users.db")
    conn.row_factory = sqlite3.Row
    c = conn.cursor()
    c.execute("""
        SELECT full_name, username, registration_date
        FROM users
        WHERE invited_by = ?
        ORDER BY registration_date DESC
    """, (user_id,))
    referrals = c.fetchall()
    conn.close()

    if not referrals:
        await callback.message.answer("üë• –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö.")
        return

    text = "üë• <b>–ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
    for r in referrals:
        username = f"@{r['username']}" if r['username'] else "‚Äî"
        reg_date = r['registration_date'] or "‚Äî"
        text += f"üë§ <b>{r['full_name']}</b> ({username})\nüìÖ {reg_date}\n\n"

    await callback.message.answer(text.strip(), parse_mode="HTML")

@router.callback_query(F.data.startswith("set_status:"))
async def set_user_status(callback: CallbackQuery):
    _, user_id_str, status_value = callback.data.split(":")
    user_id = int(user_id_str)

    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("UPDATE users SET status = ? WHERE telegram_id = ?", (status_value, user_id))
    conn.commit()
    conn.close()

    display = status_value if status_value else "–±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞"
    await callback.message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞: <b>{display}</b>", parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("user_status:"))
async def choose_status(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_status_choice_keyboard(user_id))
    await callback.answer()